// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  // url      = env("DATABASE_URL")
  url="mysql://bastaruser:qwerty1995@mysql-32533-0.cloudclusters.net:32533/newbastar"
}

generator client {
  provider = "prisma-client-js"
}


model User {
  @@map(name:"user")
  id               Int      @id @default(autoincrement())
  username         String
  email            String   @unique
  mobile           String   @unique
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // Relation
  profile          UserProfile[]
  otps             OtpProfile[]
  enqPack          EnquiryPackage[]
  enqDest          EnquiryDestination[]
  rp               ReviewPackage[]
  rd               ReviewDestination[]

}

model UserProfile {
  @@map(name:"userprofile")
  id              Int      @id @default(autoincrement())
  name            String
  photo           String
  address         String
  city            String
  state           String
  pincode         String
  user            User    @relation(fields: [userId], references: [id])
  userId          Int  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OtpProfile {
  @@map(name:"otpprofile")
  id              Int      @id @default(autoincrement())
  otp             String   @unique
  user            User     @relation(fields: [userId], references: [id])
  userId          Int  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AdminUser {
  @@map(name:"adminuser")
  id                 Int      @id @default(autoincrement())
  name               String
  email              String   @unique
  mobile             String   @unique
  password           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
 
  // Relation

  admuser            AdminUserProfile[]
  packagect          PackageCategory[]
  destinationct      DestinationCategory[]
  package            Package[]
  destination        Destination[]
  enqPack            EnquiryPackage[]
  enqDest            EnquiryDestination[]

}

model AdminUserProfile {
  @@map(name:"adminuserprofile")
  id              Int      @id @default(autoincrement())
  chname          String
  photo           String
  address         String
  city            String
  state           String
  pincode         String
  aduser          AdminUser    @relation(fields: [adminuserId], references: [id])
  adminuserId     Int  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}



model SuperAdminUser {
  @@map(name:"superadminuser")
  id               Int      @id @default(autoincrement())
  username         String
  email            String   @unique
  mobile           String   @unique
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model PackageCategory {
  id                        Int                @id @default(autoincrement())
  title                     String
  description               String
  status                    Boolean
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  aduser                    AdminUser          @relation(fields: [adminuserId], references: [id])
  adminuserId               Int  
  // package                   Package            @relation(fields: [pkId], references: [id])
  package                   Package[]            
  // pkId                      Int 

  @@map("PackageCategories")
}

model DestinationCategory {
  id                        Int                   @id @default(autoincrement())
  title                     String
  description               String
  status                    Boolean
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  aduser                    AdminUser              @relation(fields: [adminuserId], references: [id])
  adminuserId               Int  
  // destination               Destination            @relation(fields: [desId], references: [id])
  destination               Destination[]            
  // desId                     Int 


  @@map("DestinationCategories")
}


model Package {
  @@map(name:"package")
  id               Int        @id @default(autoincrement())
  title            String
  subtitle         String
  videoURL         String
  images           String
  description      String
  inclusion        String
  exclusion        String
  price            String
  location         String
  latitude         String 
  longitude        String 
  type             String
  status           String 
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt 
  aduser           AdminUser    @relation(fields: [adminuserId], references: [id])
  adminuserId      Int  
  packcat          PackageCategory @relation(fields: [packId], references: [id])
  packId           Int  
  enqPack          EnquiryPackage[]
  rp               ReviewPackage[]
 

}

model Destination {
  @@map(name:"destination")
  id               Int      @id @default(autoincrement())
  title            String
  subtitle         String
  videoURL         String
  images           String
  description      String
  price            String
  location         String
  latitude         String 
  longitude        String 
  type             String
  status           String
  aduser           AdminUser    @relation(fields: [adminuserId], references: [id])
  adminuserId      Int  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  destcat          DestinationCategory @relation(fields: [destId], references: [id])
  destId           Int 
  enqDest          EnquiryDestination[]
  rd               ReviewDestination[]
}

model EnquiryPackage {
  id                        Int                   @id @default(autoincrement())
  message                   String

  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  aduser                    AdminUser              @relation(fields: [adminuserId], references: [id])
  adminuserId               Int
  user                      User                   @relation(fields: [userId], references: [id])
  userId                    Int  
  package                   Package                 @relation(fields: [pkgId], references: [id])
  pkgId                     Int 

  @@map("enquiryPackage")

}

model EnquiryDestination {
  id                        Int                   @id @default(autoincrement())
  message                   String

  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  aduser                    AdminUser              @relation(fields: [adminuserId], references: [id])
  adminuserId               Int
  user                      User                   @relation(fields: [userId], references: [id])
  userId                    Int  
  destination               Destination            @relation(fields: [desId], references: [id])
  desId                     Int 

  @@map("enquiryDestination")

}

model ReviewPackage{
  @@map("reviewPackage")
  id                        Int                   @id @default(autoincrement())
  starpoint                 String
  user                      User                   @relation(fields: [userId], references: [id])
  userId                    Int 
  package                   Package                 @relation(fields: [pkgId], references: [id])
  pkgId                     Int 
}

model ReviewDestination{
  @@map("reviewDestination")
  id                        Int                   @id @default(autoincrement())
  starpoint                 String
  user                      User                   @relation(fields: [userId], references: [id])
  userId                    Int 
  destination               Destination            @relation(fields: [desId], references: [id])
  desId                     Int 
}