// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  // url      = env("DATABASE_URL")
  url="mysql://bastaruser:qwerty1995@mysql-32533-0.cloudclusters.net:32533/newbastar"
}

generator client {
  provider = "prisma-client-js"
}


model User {
  @@map(name:"user")
  id               Int      @id @default(autoincrement())
  username         String
  email            String   @unique
  mobile           String   @unique
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  profile          UserProfile[]
  otps             OtpProfile[]
}

model UserProfile {
  @@map(name:"userprofile")
  id              Int      @id @default(autoincrement())
  name            String
  photo           String
  address         String
  city            String
  state           String
  pincode         String
  user            User    @relation(fields: [userId], references: [id])
  userId          Int  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model OtpProfile {
  @@map(name:"otpprofile")
  id              Int      @id @default(autoincrement())
  otp             String   @unique
  user            User     @relation(fields: [userId], references: [id])
  userId          Int  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AdminUser {
  @@map(name:"adminuser")
  id               Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  mobile           String   @unique
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  admuser          AdminUserProfile[]
  package          Package[]
  destination      Destination[]
}

model AdminUserProfile {
  @@map(name:"adminuserprofile")
  id              Int      @id @default(autoincrement())
  chname          String
  photo           String
  address         String
  city            String
  state           String
  pincode         String
  user            AdminUser    @relation(fields: [adminuserId], references: [id])
  adminuserId     Int  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}



model SuperAdminUser {
  @@map(name:"superadminuser")
  id               Int      @id @default(autoincrement())
  username         String
  email            String   @unique
  mobile           String   @unique
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Category {
  @@map(name:"category")
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  status           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  package          Package[]
  destination      Destination[]

}

model Package {
  @@map(name:"package")
  id               Int      @id @default(autoincrement())
  title            String
  subtitle         String
  videoURL         String
  images           String
  description      String
  inclusion        String
  exclusion        String
  price            String
  location         String
  latitude         String 
  longitude        String 
  type             String
  status           String
  adminRel         AdminUser    @relation(fields: [adminId], references: [id])
  adminId          Int
  categoryRel      Category     @relation(fields: [categoryId], references: [id])
  categoryId       Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Destination {
  @@map(name:"destination")
  id               Int      @id @default(autoincrement())
  title            String
  subtitle         String
  videoURL         String
  images           String
  description      String
  price            String
  location         String
  latitude         String 
  longitude        String 
  type             String
  status           String
  adminRel         AdminUser    @relation(fields: [adminId], references: [id])
  adminId          Int
  categoryRel      Category     @relation(fields: [categoryId], references: [id])
  categoryId       Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

